#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

# Quick Hack to call gpscorrelate for a series of pictures (the ones in the
# current directory) with the correct time adjustment
#
# The time adjustment is asked from the last picture in the directory.
# So make sure you potograph the time of your GPS as the last picture
#
# No error checking added yet
#

# *** Import modules
# Program call
import subprocess
# directory listing
import os
# Regexp
import re
# Exif extraction - not yet for python3 :-(
import PIL.Image
import PIL.ExifTags
# Date calculations
import datetime
import time
# Command line
import sys

# *** Some settings
opts = {'picview_cmd': "gpicview",  # Picture viewer
      }


# *** Command line argument: Track file
if len(sys.argv) != 2 or sys.argv[1] == "-h" or sys.argv[1] == "--help":
    print("GPScorrelate: gpscorrelate for a series of pictures (the ones in the")
    print("current directory) with the correct time adjustment.")
    print("\nUsage:")
    print("GPScorrelate track_file.gpx")
    sys.exit()
trackfil = sys.argv[1]



# *** First we need to determine the time offset in seconds
# Get listing, sort, filter out non-pics
dirlist = os.listdir('.')
lastfile = sorted(filter(re.compile("\.jpg$" , re.IGNORECASE).search, dirlist))[-1]
print("Check this file for timestamp: " + lastfile)
subprocess.Popen([opts['picview_cmd'], lastfile])

print("What's the time shown on your GPS (HH:MM:SS)? ")
timeshown = sys.stdin.readline().rstrip('\n')

# Debug: timeshown="19:19:18"
# print(timeshown)
img = PIL.Image.open(lastfile)
for tg, val in img._getexif().items():
    # Need to do some decoding
    if PIL.ExifTags.TAGS.get(tg, tg) == "DateTime":
        timexif = val
        break
# img.close()  # How to close again?
print("EXIF time is " + timexif )


# Now get the difference between the two, we just ignore the day itself
# print(timeshown)
tpic  = time.strptime(timeshown, "%H:%M:%S")
texif = time.strptime(timexif,   "%Y:%m:%d %H:%M:%S")
# Time es deltas
dpic  = datetime.timedelta(seconds=tpic[5], minutes=tpic[4], hours=tpic[3] )
dexif = datetime.timedelta(seconds=texif[5], minutes=texif[4], hours=texif[3] )
seconds = int( (dpic - dexif).total_seconds() )


# We also need to adjust for difference between UTC and local time, GPS data is in UTC
utcadjust = int( round( (datetime.datetime.now()-datetime.datetime.utcnow()).total_seconds() ) / 60 / 60 )

# Beware, when you had the shift between winter and summer time you will be off by one hour!

# *** Just hand this over as seconds to the call for gpscorrelate
print("gpscorrelate  --timeadd  " + str(utcadjust) + " -t -g \"" + trackfil + "\" -v -O " + str(seconds) + " *.jpg *.JPG")
# Alternative: Also include subdirectories
# subprocess.call("find . -iname \*.jpg -print0 | xargs --null gpscorrelate --timeadd " + str(utcadjust) + " -t -g " + trackfil + " -v -O " + str(seconds), shell=True)

subprocess.call("find . -maxdepth 1 -iname \*.jpg -print0 | xargs --null gpscorrelate --timeadd  " + str(utcadjust) + " -t -g \"" + trackfil + "\" -v -O " + str(seconds), shell=True)


# Status infos
print ("Time adjustment for UTC: " + str(utcadjust) + "hour(s) (beware of summer/winter time shift!")
print ("Corrected time by: " + str(seconds) + "s")


# Done
print("Done - Over and out")
