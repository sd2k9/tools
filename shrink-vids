#!/bin/bash
# Re-encode movies taken from digital cameras to significantly shrink the file size
# with only a small loss of quality.
# Resutling files are in MPEG4 format, the bitrate is determined by the input
# movie width. Please modify/add in the file your favourite values.
# It uses two pass encoding.
#
#      Version: $LastChangedRevision$
#  last change: $LastChangedDate: 2008-03-21 22:36:35 +0100 (Fri, 21 Mar 2008) $
#
#    Copyright (C) 2013,2014 by Robert Lange <sd2k9@sethdepot.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# ------------------------------------------------------------------------------

# *** Settings ***
# Mencoder
MENCODER=mencoder
# Encoding options are set below
# Movie Identification
MPLAYER=mplayer
MIDENTIFY="$MPLAYER -vo null -ao null -identify -frames 0"
# Number of threads to use for encoding
# Default use number of processors in system
THREADS=$(grep "processor" /proc/cpuinfo | wc -l)

# ------------------------------------------------------------------------------
# *** Functions ***
function help_text() {
cat<<EOF
Shrink (camera) videos to smaller size

Usage: $(basename $0) [--start starttime --end endtime] model inputfile outputfile.avi

--start starttime: Start encoding from time, in seconds or hh:mm:ss
--end endtime:     Finish encoding at time, in seconds or  hh:mm:ss
model: Bitrate presets for encoding
       ACTIONPRO: Actionpro X7 camera
       IXUS500: Canon Ixus 500
       VHS: VHS Mono PAL Video

inputfile: File to shrink
outputfile.avi: Resulting file, must be AVI

Used commands: $MENCODER $MPLAYER

EOF
}

# Print Versionstring
function versionstring () {
# REVISION='$LastChangedRevision$'
# REVISION=${REVISION#\$LastChangedRevision: }
# REVISION=${REVISION% \$}
cat<<EOF
shrink-vids, Revision DEV
(c) 2013,2014 by Robert Lange (sd2k9@sethdepot.org)
Licensed under the GNU General Public License

EOF
}

# Parse time to seconds
# Input: ss oder hh:mm:ss
function parse_time() {
    local num
    num="$1"
    shift

    # Only numbers? Return as-is
    if [[ $num =~ ^[0-9]+$ ]] ; then
	echo "$num"

    # hh:mm:ss? Let date do the work
    elif [[ $num =~ ^[0-2][0-9]:[0-5][0-9]:[0-5][0-9]$ ]] ; then
	echo $(date -u --date "1970-01-01 ${num}"  +"%s")
    # Everything else? Error
    else
	echo "Error: Unknown time format ${num}" 1>&2;  # To stderr, otherwise its caught as return
	echo ""
    fi
}


# ------------------------------------------------------------------------------

# *** Rudimentary command line parsing

# *** Kommandozeile auswerten
get_options() {
  local opt
  local argcounter=1

   # Parse command line for options
   while [ -n "$*" ]; do
      opt="$1"
      shift
      case $opt in
      --help | -h) # Help
         # First print  Versionstring
         versionstring
         echo
         help_text
         exit
         ;;
      --version | -V) # Version
         echo
         versionstring
         exit
         ;;
      --start | -ss) # Next argument: Start Time
         opt="$1"
         shift
         MOV_START=$(parse_time "$opt")
	 if [ -z "${MOV_START}" ]; then # Error occured
	     exit 1
	 fi
         ;;
      --end | -e) # Next argument: End time
         opt="$1"
         shift
         MOV_END=$(parse_time "$opt")
	 if [ -z "${MOV_END}" ]; then # Error occured
	     exit 1
	 fi
         ;;
      *) # Positional options
     	  case $argcounter in
      	    1)
      		MODEL="$opt"
      		;;
      	    2)
      		INFILE="$opt"
      		;;
      	    3)
      		OUTFILE="$opt"
      		;;
      	    *)
                # Too many arguments
  	        echo "Too many arguments! See help text for usage"
  		exit 1
  		;;
      	  esac
          #increment argument counter
          let argcounter++
          ;;
      esac
    done
}

# *** Call Command Line Parsing
# When no options supplied then call help
if [ -z "$1" ]; then
    get_options "--help"
else
    get_options "$@"
fi


# No or wrong commands supplied
if [ -z "$OUTFILE" ]; then
    echo "Wrong number of command line options!"
    echo
    help_text
    exit 1
fi

# *** Check for input file
if [ ! -f "$INFILE" ]; then
   echo "Input file \"$INFILE\" not existing!"
   exit 1
fi


# ------------------------------------------------------------------------------

# *** Now execute the action

# *** Determine input material
VIDEO_WIDTH=$($MIDENTIFY "$INFILE" 2> /dev/null |grep "ID_VIDEO_WIDTH" | cut -c 16-)

# *** Set encoding options
# Additional encoder options
MENCODER_MOREOPTS=
# Descriptive text when used
MENCODER_MOREOPTS_DESC=
# Select appropriate bitrate
# Parameter to tune: vbitrate=bitrate in 1000bits
# IXUS500: This is for Canon Ixus 500
case ${MODEL} in
 "actionpro"|"ACTIONPRO"|"X7"|"x7")
  # Actioncam Actionpro X7
  case ${VIDEO_WIDTH} in
   1920)
     VIDEO_BITRATE=12000
     AUDIO_BITRATE=64
     ;;
   1280)
     VIDEO_BITRATE=6000
     AUDIO_BITRATE=64
     ;;
   *)
     echo "Unknown Input Video Material - Movie Width is ${VIDEO_WIDTH}"
     echo "Dunno how to setup video bit rate - Exiting"
     exit
     ;;
  esac
  ;;
 "ixus500"|"IXUS500")
  # For Canon Ixus 500
  case ${VIDEO_WIDTH} in
   1920)
     VIDEO_BITRATE=5000
     AUDIO_BITRATE=56
     ;;
   640)
     VIDEO_BITRATE=1800
     AUDIO_BITRATE=56
     ;;
   *)
     echo "Unknown Input Video Material - Movie Width is ${VIDEO_WIDTH}"
     echo "Dunno how to setup video bit rate - Exiting"
     exit
     ;;
  esac
  ;;
 "VHS"|"vhs")
  # For VHS Video PAL Mono Encoding
  VIDEO_BITRATE=1536
  AUDIO_BITRATE=56
  # Cropping and Noise Filtering - Deinterlacing disabled
  # MENCODER_MOREOPTS="${MENCODER_MOREOPTS} -vf crop=696:552:12:8,pp=lb -noslices"
  MENCODER_MOREOPTS="${MENCODER_MOREOPTS} -vf crop=696:552:12:8,denoise3d -noslices"
  #  MENCODER_MOREOPTS="${MENCODER_MOREOPTS} -vf crop=696:552:12:8,hqdn3d -noslices"
  if [ -n "${MENCODER_MOREOPTS_DESC}" ]; then  # Add space and komma
      MENCODER_MOREOPTS_DESC="${MENCODER_MOREOPTS_DESC}, "
  fi
  # MENCODER_MOREOPTS_DESC="${MENCODER_MOREOPTS_DESC}Cropping and Deinterlacing"
  MENCODER_MOREOPTS_DESC="${MENCODER_MOREOPTS_DESC}Cropping and Denoising"
  ;;
 *)
   echo "Unknown Video Type (Model) - Exiting"
   exit
   ;;
esac


# *** Now bild start and end time, when requested
# Start time we can take verbatim
if [ -n "${MOV_START}" ]; then
   # End must be given
   if [ -z "${MOV_END}" ]; then
       echo "ERROR: Currently start and end, both must be given!"
       exit 1
   fi
   # Is start smaller than end
   if [ ${MOV_START} -ge ${MOV_END} ]; then
       echo "ERROR: start must be smaller than end! You wanna encode backwards?!"
       exit 1
   fi
   # Now build the options
   MENCODER_MOREOPTS="${MENCODER_MOREOPTS} -ss ${MOV_START} -endpos $((${MOV_END} - ${MOV_START}))"
   # Update desc text
   if [ -n "${MENCODER_MOREOPTS_DESC}" ]; then  # Add space and komma
         MENCODER_MOREOPTS_DESC="${MENCODER_MOREOPTS_DESC}, "
   fi
   MENCODER_MOREOPTS_DESC="${MENCODER_MOREOPTS_DESC}Start/End Time"
else
  # It's an error when only END is present
  if [ -n "${MOV_END}" ]; then
      echo "ERROR: Currently start and end, both must be given!"
      exit 1
  fi
fi

# Mencoder default options; taken from www.mplayerhq.hu and
# a little bit adjusted. I am sure there is much space for improvement.
# No audio resampling: -srate 22050
# Two pass encoding is appended at the end
MENCODER_OPTS="${MENCODER_MOREOPTS} \
     -oac mp3lame -lameopts q=0:aq=0:abr:br=${AUDIO_BITRATE}:mode=3 -noskip -mc 0 \
     -ovc lavc -lavcopts \
     vcodec=mpeg4:vbitrate=${VIDEO_BITRATE}:mbd=1:mv0:trell:v4mv:cbp:last_pred=3:predia=2:dia=2:vmax_b_frames=2:vb_strategy=1:precmp=2:cmp=2:subcmp=2:preme=2:qns=2:threads=${THREADS}"


# *** Execute shrink ***
echo
echo "Converting file ..."
echo "Selected Coding Model = ${MODEL}"
echo "Selected bitrate = ${VIDEO_BITRATE} * 1000bit"
echo "Selected Audio Bitrate = ${AUDIO_BITRATE}kbps"
if [ -n "${MENCODER_MOREOPTS_DESC}" ]; then
   echo "Additional Encoding Options = ${MENCODER_MOREOPTS_DESC}"
fi
if [ -n "${MOV_END}" ]; then
   echo "Only encode from ${MOV_START}s to ${MOV_END}s"
fi
echo "First pass ..."
echo $MENCODER ${MENCODER_OPTS}:vpass=1:turbo -o $OUTFILE $INFILE
$MENCODER ${MENCODER_OPTS}:vpass=1:turbo -o "$OUTFILE" "$INFILE"
echo "Second pass ..."
echo $MENCODER ${MENCODER_OPTS}:vpass=2 -o $OUTFILE $INFILE
$MENCODER ${MENCODER_OPTS}:vpass=2 -o "$OUTFILE" "$INFILE"

# Error when result file was not created
if [ ! -f "$OUTFILE" ]; then
  echo "Result file not existing! Something went wrong"
  exit 1
fi

# Remove statistics file again
rm divx2pass.log

# *** Print resulting file size ***
echo
echo "File sizes:"
ls -1 -hs "$INFILE" "$OUTFILE"
echo

