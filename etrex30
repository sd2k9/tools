#!/bin/bash
# Wrapper f√ºr Garmin etrex 30
# See help
#
# TODO
# - Combine putosm and puttopo
#
#      Version: $LastChangedRevision$
#  last change: $LastChangedDate$
#    Copyright (C) 2013 by Robert Lange <sd2k9@sethdepot.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#




# *** Settings ***
# Garmin Mount Point
MNT=/media/GARMIN
MNT_GPX="$MNT/Garmin/GPX"
MNT_OSM="$MNT/Garmin"

# Test mode: True when defined (only echo commands)
TESTMODE=

# Selected Command (see help)
COMMAND_MODE=
# Option to Command (2nd parameter)
COMMAND_1P=
# Option to Command (3rd parameter)
COMMAND_2P=
# Option to Command (4th parameter)
COMMAND_3P=
# Option to Command (5th parameter)
COMMAND_4P=

# GPSbabel executable
GPSBABEL=gpsbabel
# Map2Navi executable
MAP2NAVI=map2navi
# mkgmap executable
MKGMAP=mkgmap
# Created map file by mkgmap
MKGMAP_OUT="gmapsupp.img"

# *** Funktionen ***

# *** General message pop up
# 1.P: Message
# msg_pop_up() {
#    local msg
#    msg="$1"
#    shift

# tool there?
tool_there() {
  local cmd
  cmd="$1"
  shift
  if [ $(which $cmd > /dev/null) ]; then
   echo "$cmd executable not found!"
   exit 1
  fi
}
# Abort on tool error (errorcode <> 0)
abort_on_error() {
    local err
    err=$1
    shift
    if [ $err -ne 0 ]; then
	   echo "Program execution failed with error code $err!"
	   exit 1
    fi
}
# Execute this tool
# Caution: Use \"text with spaces\" to escape spaces
exec_tool() {
   echo "$@"
   if [ -z "$TESTMODE" ]; then
       eval "$@"
       abort_on_error $?
   fi
}
# Create a symbolic link within the correct directory
exec_ln() {
    local ifil
    # Resolve input file to absolute path
    ifil=$(readlink -f "$1")
    abort_on_error $?
    shift
    local ofil
    ofil="$1"
    shift
    # Use the file verbatim; make link for it - need to change to target directory
    exec_tool pushd ${ofil%/*}
    exec_tool ln -s \"$ifil\" \"${ofil##*/}\"
    exec_tool popd
}
# gpx Mount Point there?
gpx_mount_point_there() {
  if [ ! -d "$MNT_GPX" ]; then
   echo "GPX/ mount point below $MNT_GPX not found!"
   # Ignore in testmode
   [ -z "$TESTMODE" ] && exit 1
  fi
}

# Does this file already exists?
check_file_existence() {
  local fil
  fil="$1"
  shift
  if [ -f "$fil" ]; then
   echo "File $fil already exists! Move away manually!"
   # Ignore in testmode
   [ -z "$TESTMODE" ] && exit 1
  fi
}


# *** Kommandozeile auswerten
get_options() {
  local opt
  local argcounter=1

  while [ -n "$*" ] ; do
      opt="$1"
      shift
      case $opt in
          -t|--test|--dry-run)
          # Test Mode
       	  TESTMODE=1
      	;;
          -V|--version)
          # Version output
          REVISION='$LastChangedRevision: DEV $'
          REVISION=${REVISION#\$LastChangedRevision: }
          REVISION=${REVISION%\$}
          echo "etrex30, Revision $REVISION"
          echo "(c) by Robert Lange <sd2k9@sethdepot.org>"
          exit 0
          ;;
          -h|--help|'-?')
          # Hilfetext
          echo "etrex30 - Wrapper around various Garmin etrex 30 Tasks"
          echo
          echo "Call: etrex30 command options"
          echo
          echo "General Options:"
          echo " [-t|--test|--dry-run] - Do not execute commands, only echo"
          echo "        [-V|--version] - Print program version and exit"
          echo
          echo "Download a GPS Track"
	  echo "  Command: (put)track routename gpx_or_google_maps_url"
	  echo "  Downloads the specified route file to the GPS"
	  echo "  The track can be compressed with xz."
	  echo "  Conversion is done with ${MAP2NAVI}"
          echo
          echo "Download a list of points"
	  echo "  Command: (put)points points.csv"
	  echo "  Downloads the specified points to the GPS"
	  echo "  Format of points.csv:"
	  echo "  latitude, longitude, Name"
	  echo "  Conversion is done with ${GPSBABEL}"
	  echo
          echo "Download a OSM Map"
	  echo "  Command: (put)osm map.osm[.xz] title shorttitle"
	  echo "  Downloads the specified OSM Map file to the GPS by the name gmap_<shorttitle>.img"
	  echo "  with the supplied title and the map file name on the device."
	  echo "  The input OSM file can be compressed with xz."
	  echo "  Conversion is done with ${MKGMAP}"
	  echo
          echo "Combine a OSM Map with Topographic overlay and Download it"
	  echo "  Command: (put)topo map.osm[.xz] topo.osm[.xz|.gz] title shorttitle"
	  echo "  Combine the specified OSM Map file with the provided topographic overlay and"
          echo "  download it to the GPS with the supplied title by the name gmap_<shorttitle>.img"
	  echo "  The input OSM files can be compressed with xz or gzip."
	  echo "  Merging and conversion is done with ${MKGMAP}"
          echo
          echo "Beautify/Make a GPX file human-readable"
	  echo "  Command: fixgpx file"
	  echo "  Runs the gpx file through ${GPSBABEL} and transforms it into a readable structure."
	  echo "  For example, files from the garmin device lack spaces and line breaks."
          echo
	  echo "Get mkgmap from http://www.mkgmap.org.uk/snapshots/"
	  echo "  Caution: The available debian package is very old and probably won't work"
          exit 0
        ;;
          *)
          # Else store into COMMAND*
     	  case $argcounter in
      	    1)
      		COMMAND_MODE="$opt"
      		;;
      	    2)
      		COMMAND_1P="$opt"
      		;;
      	    3)
      		COMMAND_2P="$opt"
      		;;
      	    4)
      		COMMAND_3P="$opt"
      		;;
      	    5)
      		COMMAND_4P="$opt"
      		;;
      	    *)
                  # Too many arguments
  	        echo "Too many arguments! See help text for usage"
  		exit 1
  		;;
      	  esac
          #increment argument counter
          let argcounter++
      	;;
      esac
  done
}

# *** Call Command Line Parsing
# When no options supplied then call help
if [ -z "$1" ]; then
    get_options "--help"
else
    get_options "$@"
fi

# echo $COMMAND_MODE
# *** Select working mode ***
case "$COMMAND_MODE" in
# *** Trackdownload
track|puttrack)
   # Check for map2navi
   tool_there "$MAP2NAVI"

   # Check for GPX Mount point
   gpx_mount_point_there
   # Does the input parameters exists?
   if [ -z "$COMMAND_2P" ]; then
     echo "No options supplied to command!"
     exit 1
    fi

   # Prepare for Garmin - use intermediate temporary file
   INFILE=$(tempfile --suffix=.gpx)
   # When required decompress input file
   if [ "${COMMAND_2P##*.}" == "xz" ]; then
       echo "Extracting compressed track file ..."
       echo "xz -d -c ${COMMAND_2P} > $INFILE"
       # Not in testmode
       if [ -z "$TESTMODE" ]; then
	   xz -d -c "${COMMAND_2P}" > "$INFILE"
	   ERR=$?
	   if [ $ERR -ne 0 ]; then
	       echo "Program execution failed with error code $ERR!"
	       exit 1
	   fi
       fi
   else
       # Use the file verbatim; make link for it (remove our tempfile first)
       exec_tool  rm  "$INFILE"
       exec_ln "$COMMAND_2P" "$INFILE"
   fi

   # Convert using map2navi
   echo "$MAP2NAVI --stdout $COMMAND_1P $INFILE"
   GPXFILE=$($MAP2NAVI --stdout "$COMMAND_1P" "$INFILE")
   ERR=$?
   if [ $ERR -ne 0 ]; then
       echo "Program execution failed with error code $ERR!"
       exit 1
   fi

   # Download to GPX with routename date
   GPX_STORE_FILE="$MNT_GPX/${COMMAND_1P}.gpx"
   check_file_existence "$GPX_STORE_FILE"
   echo "Writing track to file $GPX_STORE_FILE"
   # Not in testmode
   [ -z "$TESTMODE" ] && cat <<< "$GPXFILE" >> "$GPX_STORE_FILE"
   # Debug
   # echo "---"
   # cat <<< $GPXFILE
   # echo "---"
   ;;

# *** Pointdownload
points|putpoints)
   # Check for gpsbabel
   tool_there $GPSBABEL
   # Check for GPX Mount point
   gpx_mount_point_there
   # Does the input file exists
   if [ ! -f "$COMMAND_1P" ]; then
     echo "Point file $COMMAND_1P does not exists!"
     exit 1
    fi

   # Convert points
   echo "$GPSBABEL -D 0 -w -i csv -f $COMMAND_1P -o gpx -F -"
   GPXFILE="$($GPSBABEL -D 0 -w -i csv -f $COMMAND_1P -o gpx -F -)"

   # Download to GPX with today's date
   GPX_STORE_FILE="$MNT_GPX/points-$(date -I).gpx"
   check_file_existence "$GPX_STORE_FILE"
   echo "Writing points to file $GPX_STORE_FILE"
   # Not in testmode
   [ -z "$TESTMODE" ] && cat <<< $GPXFILE >> $GPX_STORE_FILE
   # Debug
   # echo "---"
   # cat <<< $GPXFILE
   # echo "---"
   ;;

osm|putosm)
   # Check for mkgmap
   tool_there "$MKGMAP"

   # Check for GPX Mount point
   gpx_mount_point_there
   # Does the input parameters exists?
   if [ -z "$COMMAND_3P" ]; then
     echo "No options (or not enough) supplied to command!"
     exit 1
   fi

   # Prepare for Garmin - use intermediate temporary file
   INFILE=$(tempfile --suffix=.osm)
   # When required, decompress xz'ed OSM file
   if [ "${COMMAND_1P##*.}" == "xz" ]; then
       echo "Extracting compressed OSM file ..."
       echo "xz -d -c ${COMMAND_1P} > $INFILE"
       # Not in testmode
       if [ -z "$TESTMODE" ]; then
	   xz -d -c "${COMMAND_1P}" > "$INFILE"
	   ERR=$?
	   if [ $ERR -ne 0 ]; then
	       echo "Program execution failed with error code $ERR!"
	       exit 1
	   fi
       fi
   else
       # Use the file verbatim; make link for it (remove our tempfile first)
       exec_tool  rm  "$INFILE"
       exec_ln "$COMMAND_1P" "$INFILE"
   fi


   # Work unter /tmp for temporary file
   cd /tmp
   check_file_existence "/tmp/$MKGMAP_OUT"
   # Get a random number for the map name; each map need an unique number with 8 digits
   MAPNUM="$(printf  '%.4d' $(( $RANDOM % 10000 )) )$(printf  '%.4d' $(( $RANDOM % 10000 )) )"
   exec_tool mkgmap -n $MAPNUM --description=\"$COMMAND_2P\" --latin1 --gmapsupp \
      	               --remove-short-arcs=3 --route \
    		       "$INFILE"
   if [ ! -f "$MKGMAP_OUT" ]; then
     echo "File $MKGMAP_OUT did not got created! Something went wrong!"
     exit 1
   fi

   # Download to etrex with requested name
   STORE_FILE="${MNT_OSM}/gmap_${COMMAND_3P}.img"
   check_file_existence "$STORE_FILE"
   echo "Writing map to file $STORE_FILE"
   # Not in testmode
   [ -z "$TESTMODE" ] && cp -v "$MKGMAP_OUT" "$STORE_FILE"

   # Remove temporary files again
   echo "Removing temp files again ..."
   exec_tool rm -v  \"/tmp/$MKGMAP_OUT\"
   if [ "${COMMAND_1P##*.}" == "xz" ]; then
       exec_tool rm -v \"$INFILE\"
   fi
   ;;

topo|puttopo|osmtopo|putosmtopo)
   # Check for mkgmap
   tool_there "$MKGMAP"

   # Check for GPX Mount point
   gpx_mount_point_there
   # Does the input parameters exists?
   if [ -z "$COMMAND_4P" ]; then
     echo "No options (or not enough) supplied to command!"
     exit 1
   fi

   # Use this parameter to create/not create a file/directory with mktemp
   if [ -z "$TESTMODE" ]; then
       # No Dry run
       MKTEMPDRYRUNPARA=""
    else
       # Dry Run
       MKTEMPDRYRUNPARA="--dry-run"
   fi
   # First create temporary directory
   echo "Creating temporary directory - please clean up by yourself in case etrex30 aborts"
   echo -n "mktemp -d --tmpdir $MKTEMPDRYRUNPARA etrex30-XXXXX"
   WORKDIR=$(mktemp -d --tmpdir $MKTEMPDRYRUNPARA etrex30-XXXXX)
   echo " --> ${WORKDIR}"
   abort_on_error $?

   # Then prepare OSM file - first the file name to use, which is fixed by mkgmap
   # INFILEOSM=$(mktemp --tmpdir=${WORKDIR} $MKTEMPDRYRUNPARA infileosmXXXX.osm)
   # abort_on_error $?

   # When required, decompress xz'ed OSM file
   if [ "${COMMAND_1P##*.}" == "xz" ]; then
       echo "Extracting compressed OSM file ..."
       INFILEOSM="${WORKDIR}/60000000.osm"
       echo "xz -d -c ${COMMAND_1P} > $INFILEOSM"
       # Not in testmode
       if [ -z "$TESTMODE" ]; then
	   xz -d -c "${COMMAND_1P}" > "$INFILEOSM"
	   abort_on_error $?
       fi
   elif [ "${COMMAND_1P##*.}" == "gz" ]; then
       # Just link the GZ file, mkgmap can handle it
       INFILETOPO="${WORKDIR}/60000000.osm.gz"
       exec_ln "$COMMAND_1P" "$INFILETOPO"
   else
       # Use the file verbatim; make link for it
       INFILEOSM="${WORKDIR}/60000000.osm"
       exec_ln "$COMMAND_1P" "$INFILEOSM"
   fi
   # Same for xz'ed Topo OSM file
   # INFILETOPO=$(mktemp --tmpdir=${WORKDIR} $MKTEMPDRYRUNPARA infiletopoXXXX.osm)
   # abort_on_error $?
   if [ "${COMMAND_2P##*.}" == "xz" ]; then
       echo "Extracting compressed Topographic Overlay OSM file ..."
       INFILETOPO="${WORKDIR}/50000000.osm"
       echo "xz -d -c ${COMMAND_2P} > $INFILETOPO"
       # Not in testmode
       if [ -z "$TESTMODE" ]; then
	   xz -d -c "${COMMAND_2P}" > "$INFILETOPO"
	   abort_on_error $?
       fi
   elif [ "${COMMAND_2P##*.}" == "gz" ]; then
       # Just link the GZ file, mkgmap can handle it
       INFILETOPO="${WORKDIR}/50000000.osm.gz"
       exec_ln "$COMMAND_2P" "$INFILETOPO"
   else
       # Use the file verbatim; make link for it
       INFILETOPO="${WORKDIR}/50000000.osm"
       exec_ln "$COMMAND_2P" "$INFILETOPO"
   fi

   # Work under temporary directory
   echo "cd ${WORKDIR}"
   [ -z "$TESTMODE" ] && cd ${WORKDIR}
   check_file_existence "$MKGMAP_OUT"

   # Get a random number for the map name; each map need an unique number with 8 digits
   MAPNUM="$(printf  '%.4d' $(( $RANDOM % 10000 )) )$(printf  '%.4d' $(( $RANDOM % 10000 )) )"

   # Do everything in one step, single conversion as given by OSM Wiki does not work --> gmapsupp.img
   exec_tool mkgmap --verbose -n $MAPNUM --description=\"$COMMAND_3P\" --latin1 --gmapsupp \
      	               --remove-short-arcs=3 --route \
                       --family-id=60 --family-name=\"OSM\"  --product-id=1 \
                          --draw-priority=25 \"$INFILEOSM\" \
		       --family-id=50 --family-name=\"Topo\" --product-id=1 \
                          --draw-priority=100 --transparent  \"$INFILETOPO\"
   if [ -z "$TESTMODE" -a ! -f "$MKGMAP_OUT" ]; then
     echo "File $MKGMAP_OUT did not got created! Something went wrong!"
     exit 1
   fi

   # Download to etrex with requested name
   STORE_FILE="${MNT_OSM}/gmap_${COMMAND_4P}.img"
   check_file_existence "$STORE_FILE"
   echo "Writing map to file $STORE_FILE"
   # Not in testmode
   [ -z "$TESTMODE" ] && cp -v "$MKGMAP_OUT" "$STORE_FILE"

   # Remove temporary directory again
   echo "Removing temp directory again ..."
   exec_tool rm -rv \"${WORKDIR}\"
   ;;

# *** GPX file beautification
fixgpx)
   # Check for gpsbabel
   tool_there "$GPSBABEL"

   # Does the input file name exists?
   if [ -z "$COMMAND_1P" ]; then
     echo "No options supplied to command!"
     exit 1
   fi
   if [ ! -f "$COMMAND_1P" ]; then
     echo "File $COMMAND_1P not found!"
     exit 1
   fi

   # Convert using gpsbabel
   exec_tool $GPSBABEL -i gpx -f \"$COMMAND_1P\" -o gpx -F \"$COMMAND_1P\"
   ERR=$?
   if [ $ERR -ne 0 ]; then
       echo "Program execution failed with error code $ERR!"
       exit 1
   fi
   ;;

# *** Unknown Function
*)
echo "Unknown Function \"$COMMAND_MODE\" requested!"
exit 1
;;

esac

echo
echo "Done"
