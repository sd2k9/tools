#!/bin/bash
# Function & Usage
# - See help text
#
# Notes
# -
#
# TODO
# -
#
#  (c) 2021 Robert Lange (sd2k9@sethdepot.org)
#  GNU General Public Licence applies

# ------------------------------------------------------------------------------

# *** Settings ***
# Treat uninitialised variable as error and exit script
set -u
# Test mode: True when defined (only echo commands)
declare TESTMODE
# Program name
readonly PRGNAME=${0##*/}
# Mode, selected from command line
declare MODE=""
# File names to process, remaining command line after mode and options
declare -a FILELIST
# Input file to process
declare INFILE


# ------------------------------------------------------------------------------

# *** Functions ***
# Load shared functions
readonly EXEC_DO_NO_ABORT_ON_ERROR=false
source ${BASH_SOURCE[0]%/*}/bash-functions

# *** Functions ***
function help_text() {
cat<<EOF
Wrapper for pdf conversion tools, to expose a commong interface.

Usage: $PRGNAME [OPTS] mode inputfile(s)
* -h|--help: This screen"
* -V|--version: Print program version and exit"
* -t|--test|--dry-run: Do not execute commands, only echo"
* mode: Operation mode, see below
* inputfile: File to processs


Operation Modes
jpg, jpeg: Convert PDF to JPEG images
images: Extract images from PDF
    Requires package poppler-utils
pdf: Combine image, text and PDF file(s) to PDF
    Files ending with "txt" are treated as text,
    "pdf" as PDFs, everything else as image
    Text: Requires libreoffice
    Note: Intermediate files (from mixed conversion)
          must be removed manually
txt, text: Extract text from PDF
EOF
}

# Print Versionstring
function versionstring () {
declare -r VER=1.1.0
cat<<EOF
$PRGNAME version $VER
(c) by Robert Lange (sd2k9@sethdepot.org)
Licensed under the GNU General Public License

EOF
}

# ------------------------------------------------------------------------------

# *** Command line parsing
get_options() {
  local opt

  while [ -n "$*" ] ; do
      opt="$1"
      shift
      case $opt in
          -t|--test|--dry-run)
          # Test Mode
       	  TESTMODE=1
      	  ;;
          -V|--version)
          # Version output
          versionstring
          exit 0
          ;;
          -h|--help|'-?')
          # Hilfetext
          versionstring
	  help_text
          exit 0
        ;;
        jpg|jpeg)
	  if [[ -n $MODE ]]; then
  	     echo "Multiple mode statements! See help text for usage"
   	     exit 1
	  fi
	  MODE="$opt"
        ;;
        pdf)
	  if [[ -n $MODE ]]; then
  	     echo "Multiple mode statements! See help text for usage"
   	     exit 1
	  fi
	  MODE="$opt"
        ;;
        txt|text)
	  if [[ -n $MODE ]]; then
  	     echo "Multiple mode statements! See help text for usage"
   	     exit 1
	  fi
	  MODE="$opt"
        ;;
        images)
	  if [[ -n $MODE ]]; then
  	     echo "Multiple mode statements! See help text for usage"
   	     exit 1
	  fi
	  MODE="$opt"
        ;;
        *)
          if [[ -n $MODE ]]; then
              # Arguments after mode are expected to be file names
              if [[ ! -f "$opt" ]]; then
  	          echo "Error: File \"$opt\" not existing!"
                  exit 1
              fi
              # echo "add $opt"
              FILELIST+=("$opt")
          else
              # Unknown Argument
  	      echo "Unknown argument \"$opt\"! See help text for usage"
   	      exit 1
          fi
          ;;
      esac
  done
}


# *** Call Command Line Parsing and Program execution
# When no options supplied then call help
if [ -z "${1:-}" ]; then
    get_options "--help"
else
    get_options "$@"
fi


# ------------------------------------------------------------------------------

# *** Now execute actions, or done above
case $MODE in
  jpg|jpeg)
      for (( i=0; i<${#FILELIST[@]}; i++ ));
      do
          INFILE="${FILELIST[$i]}"
          echo "Converting input PDF file \"$INFILE\" to jpg image file(s)"
          exec_tool pdftoppm -jpeg "\"$INFILE\"" "\"${INFILE%.*}\""
          echo
      done
  ;;
  pdf)
      # First check: Only Images? Only PDF files? Or mixed?
      declare filetypes
      # Starting point is file extension of first file
      case ${FILELIST[0]##*.} in
          pdf)
              filetypes="pdf"
          ;;
          txt)
              filetypes="mix"
          ;;
          *)
              # Images
              filetypes="img"
          ;;
      esac
      # Now check other files
      for (( i=1; i<${#FILELIST[@]}; i++ ));
      do
          case ${FILELIST[$i]##*.} in
              pdf)
                  if [[ $filetypes != "pdf" ]]; then
                      # Reset and done
                      filetypes="mix"
                      break
                  fi
              ;;
              txt)
                  # Reset and done
                  filetypes="mix"
                  break
              ;;
              *)
                  # Images
                  if [[ $filetypes != "img" ]]; then
                      # Reset and done
                      filetypes="mix"
                      break
                  fi
              ;;
          esac
      done

      # For mixed file list preconversion is needed
      if [[ $filetypes == "mix" ]]; then
          # Resulting mode is PDF
          filetypes=pdf
          # Convert Non-PDF files to PDF
          for (( i=0; i<${#FILELIST[@]}; i++ ));
          do
              # Input file name
              INFILE="${FILELIST[$i]}"
              # Replace suffix with pdf
              OUTFILE="${FILELIST[$i]%.*}.pdf"
              # Decide by suffix
              case ${FILELIST[$i]##*.} in
                  pdf)
                  # Do nothing
                  ;;
                  txt)
                      echo "Converting input text file \"$INFILE\" to PDF file"
                      exec_tool libreoffice --convert-to pdf "\"$INFILE\""
                      # Update name in file array
                      FILELIST[$i]="$OUTFILE"
                      echo
                      ;;
                  *)
                      # Image
                      # And convert
                      # Add "--colorspace RGB" to resolve error
                      # img2pdf ERROR:root:error: Cannot have Palette images with ICC profile 
                      exec_tool img2pdf --output \"${OUTFILE}\" \"${INFILE}\"
                      # Update name in file array
                      FILELIST[$i]="$OUTFILE"
                      ;;
              esac
          done
      fi

      # Now build the result file list
      OUTFILE="${FILELIST[0]%.*}-output.pdf"
      # Correctly quote input files
      files=
      for (( i=0; i<${#FILELIST[@]}; i++ ));
      do
          files="$files \"${FILELIST[$i]}\""
      done
      # Execute right command
      case $filetypes in
          pdf)
              exec_tool pdftk $files cat output \"${OUTFILE}\"
          ;;
          img)
              exec_tool img2pdf --output \"${OUTFILE}\" $files
          ;;
          *)
  	      echo "Unknown file type \"$filetypes\"! Internal error!"
              exit 1
          ;;
      esac
  ;;
  images)
      for (( i=0; i<${#FILELIST[@]}; i++ ));
      do
          INFILE="${FILELIST[$i]}"
          echo "Extract images from PDF file \"$INFILE\""
          exec_tool pdfimages -all "\"$INFILE\"" "\"${INFILE%.*}-img\""
          echo
      done
  ;;
  txt|text)
      for (( i=0; i<${#FILELIST[@]}; i++ ));
      do
          INFILE="${FILELIST[$i]}"
          echo "Converting input PDF file \"$INFILE\" to text file"
          exec_tool pdftotext "\"$INFILE\"" "\"${INFILE%.*}.txt\""
          echo
      done
  ;;
  *)
      # No mode
      echo "No mode selected! See help text for usage"
      exit 1
  ;;
esac


# *** Done
echo
echo "Done"
