#!/bin/bash
# Function: Removes a submodule
#           All steps are queried for continue

# ------------------------------------------------------------------------------

# *** Settings ***
# Treat uninitialised variable as error and exit script
set -u
# Test mode: True when defined (only echo commands)
TESTMODE=

# ------------------------------------------------------------------------------

# *** Functions ***
# Include common functions
source ${BASH_SOURCE[0]%/*}/bash-functions

function help_text() {
cat<<EOF
Removes a submodule

Steps
- Submodue deinit
- Remove git module directory
- Git remove Path

Usage: $(basename $0) path_to_submodule
* path_to_submodule: The submodule path
* Start in repository root directory

EOF
}

# ------------------------------------------------------------------------------

# *** Rudimentary command line parsing
# Command line arguments
SUBMODULE=""



# Parse command line for options, other must be waves
until [ -z "${1-}" ]
 do
   # echo "Processing parameter of: '$1'"
   case $1 in
   --help | -h) # Help
      help_text
      exit
      ;;
   *) # Submodule Name
       if [[ -n "$SUBMODULE" ]]; then
	   echo "Only one submodule name allowed!"
	   exit 1
       fi
       SUBMODULE="$1"
      ;;
   esac
   shift
 done

# No submodule name supplied
if [ -z "$SUBMODULE" ]; then
    echo "Wrong number of command line options!"
    echo
    help_text
    exit 1
fi


# ------------------------------------------------------------------------------

# *** Now execute actions


echo
echo "Submodue deinit $SUBMODULE ..."
exec_tool_confirm git submodule deinit $SUBMODULE

echo
echo "Remove git module directory for $SUBMODULE ..."
exec_tool_confirm rm -rvf .git/modules/$SUBMODULE

echo
echo "Git remove Path for $SUBMODULE ..."
exec_tool_confirm git rm $SUBMODULE



# *** Done
echo
echo "Done"
exit
