#!/bin/bash
# Compares two PDF files page by page with the help of
# Imagemagick and pdftk
# With minor rewrite (TODO) the same approach can also be used
# to compare images
# Note: All pages must have the same size, otherwise the comparison fails
#
#      Version: See Git
#  last change: See Git
#
#    Copyright (C) 2015,2016, 2018 by Robert Lange <sd2k9@sethdepot.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# ------------------------------------------------------------------------------

# *** Settings ***
# Tools to use
ICOMPARE_CMD=compare
ICONVERT_CMD=convert
IIDENTIFY_CMD=identify
PDFINFO_CMD=pdfinfo
PDFTK_CMD=pdftk
# Test mode: True when defined (only echo commands) - Set by command line
TESTMODE=
# Enables crop function when defined - Set by command line
CROP=
# Density to use in conversin operations
DENSITY="300x300"
# More options can be added when needed
# opt opt opt


#  To catch failing commands in a pipe, the exit status $? reflects
#  the last non-zero exit code of any program in the pipe
set -o pipefail
#  Treat uninitialised variable as error and exit script
set -u
# ------------------------------------------------------------------------------
# *** Functions ***
function help_text() {
cat<<EOF
Compares two PDF files page by page.

Usage: $(basename $0) [-t|--test|--dry-run] [--crop] inputfile1.pdf inputfile2.pdf [outputfile]

inputfile1, inputfile2: PDF files to compare
outputfile: Base name of the comparison result, default ist "cmp"
            Do not supply file ending
-t|--test|--dry-run: Test mode: Echo commands only
--crop: When the image sizes differ, crop the larger image to the smaller size
        This function is only useful when the image size differs just by some pixels

The comparison is done with the help of Imagemagick. All pages are
converted to grayscale and then compared.
Two output files are created:
outputfile-stereo.pdf - Comparison in stereo mode
outputfile-comp.pdf - Comparison with compare tool

Note: All pages must have the same size, otherwise the comparison fails

Used tools: $ICOMPARE_CMD $ICONVERT_CMD $IIDENTIFY_CMD $PDFINFO_CMD $PDFTK_CMD

EOF
}

# Print Versionstring
function versionstring () {
# REVISION='$LastChangedRevision$'
# REVISION=${REVISION#\$LastChangedRevision: }
# REVISION=${REVISION% \$}
cat<<EOF
$(basename $0), Revision DEV
(c) 2015 by Robert Lange (sd2k9@sethdepot.org)
Licensed under the GNU General Public License

EOF
}

# *** Rudimentary command line parsing
get_options() {
  local opt
  local argcounter=1

   # Parse command line for options
   while [ -n "$*" ]; do
      opt="$1"
      shift
      case $opt in
      --help | -h) # Help
         # First print  Versionstring
         versionstring
         echo
         help_text
         exit
         ;;
      --version | -V) # Version
         echo
         versionstring
         exit
         ;;
       -t|--test|--dry-run)
          # Test Mode
       	  TESTMODE=1
         ;;
       --crop)
          # Enable Crop
       	  CROP=1
	  echo "Warning: Crop Mode Enabled. Do not use on resized images."
         ;;
      *) # Positional options
     	  case $argcounter in
      	    1)
      		INFILE1="$opt"
      		;;
      	    2)
      		INFILE2="$opt"
      		;;
      	    3)
      		OUTFILE="$opt"
      		;;
      	    *)
                # Too many arguments
  	        echo "Too many arguments! See help text for usage"
  		exit 1
  		;;
      	  esac
          #increment argument counter
          let argcounter++
          ;;
      esac
    done
}

# *** tool there?
tool_there() {
  local cmd
  cmd="$1"
  shift
  if [ $(which $cmd > /dev/null) ]; then
   echo "$cmd executable not found!"
   exit 1
  fi
}

# *** Abort on tool error (errorcode >= limit)
#     Default limit when not given: 1
abort_on_error() {
    local err
    local lim
    err=$1
    shift
    if [[ $# -eq 0 ]]; then
      lim=1
    else
      lim=$1
      shift
    fi
    if [[ $err -ge $lim ]]; then
	   echo "Program execution failed with error code $err!"
       if [[ -n "$PAGES" ]]; then
         echo "Cleaning temporary files ..."
         for N in $(seq 0 "$PAGES"); do
	     # Checks: Does this index exists, is the string not empty, does this file exists
	     IDX_PLUS_ONE=$(($N+1))
	     [[ ${#TEMPFILE1[@]} -ge $IDX_PLUS_ONE && -n "${TEMPFILE1[$N]}" && -f "${TEMPFILE1[$N]}" ]] && rm -v ${TEMPFILE1[$N]}
	     [[ ${#TEMPFILE2[@]} -ge $IDX_PLUS_ONE && -n "${TEMPFILE2[$N]}" && -f "${TEMPFILE2[$N]}" ]] && rm -v ${TEMPFILE2[$N]}
	     [[ ${#OUTFILE_STEREO[@]} -ge $IDX_PLUS_ONE && -n "${OUTFILE_STEREO[$N]}" && -f "${OUTFILE_STEREO[$N]}" ]] &&  rm -v ${OUTFILE_STEREO[$N]}
	     [[ ${#OUTFILE_COMPARE[@]} -ge $IDX_PLUS_ONE && -n "${OUTFILE_COMPARE[$N]}" && -f "${OUTFILE_COMPARE[$N]}" ]] &&  rm -v ${OUTFILE_COMPARE[$N]}
	 done
	 exit 1
       fi
    fi
}
# *** Execute this tool
# Caution: Use \"text with spaces\" to escape spaces/special characters
# First argument is error code limit; return codes greather-or-equal than this value are treated as errors
exec_tool() {
   local lim
   lim=$1
   shift
   echo "$@"
   if [ -z "$TESTMODE" ]; then
       eval "$@"
       abort_on_error $? $lim
   fi
}


# ------------------------------------------------------------------------------
# *** Main Program starts here

# *** Call Command Line Parsing
# Prefill last variable, lotherwise following test will fail
OUTFILE=""
# When no options supplied then call help
if [ -z "${1:-}" ]; then
    get_options "--help"
else
    get_options "$@"
fi


# No or wrong commands supplied
if [[ -z ${INFILE2:-} ]]; then
    echo "Wrong number of command line options!"
    echo
    help_text
    exit 1
fi

# Default for Output file
if [[ -z ${OUTFILE} ]]; then
    OUTFILE=cmp
fi

# *** Check for input files
if [ ! -f "$INFILE1" ]; then
   echo "Input file \"$INFILE1\" not existing!"
   exit 1
fi
if [ ! -f "$INFILE2" ]; then
   echo "Input file \"$INFILE2\" not existing!"
   exit 1
fi

# *** Check for tools
tool_there "$ICOMPARE_CMD"
tool_there "$ICONVERT_CMD"
tool_there "$IIDENTIFY_CMD"
tool_there "$PDFINFO_CMD"
tool_there "$PDFTK_CMD"




# *** Now execute the action
# Main body based on
# http://tex.stackexchange.com/questions/36351/comparing-the-output-of-two-pdfs

# Get page numbers
PAGES1=$(pdfinfo "$INFILE1" | grep ^Pages: | sed 's/Pages:\s*//')
abort_on_error $?
PAGES2=$(pdfinfo "$INFILE2" | grep ^Pages: | sed 's/Pages:\s*//')
abort_on_error $?

if [[ $PAGES1 > $PAGES2 ]];
then
    PAGES=$(($PAGES1-1))
else
    PAGES=$(($PAGES2-1))
fi

# *** Do for very page
for N in $(seq 0 "$PAGES"); do
    echo "Comparing page $(($N+1)) / $(($PAGES+1)) ..."

    # Temporary files to use
    TEMPFILE1[$N]=$(tempfile --prefix comp --suffix=.png)
    abort_on_error $?
    TEMPFILE2[$N]=$(tempfile --prefix comp --suffix=.png)
    abort_on_error $?
    OUTFILE_STEREO[$N]=$(tempfile --prefix comp --suffix=.pdf)
    abort_on_error $?
    OUTFILE_COMPARE[$N]=$(tempfile --prefix comp --suffix=.pdf)
    abort_on_error $?

    # When Crop is enabled, build a crop parameter, otherwise no cropping is neede
    if [[ -z "$TESTMODE" && -n "$CROP" ]]; then
 	 # Get width and height of both images
	 IN1_W=$(${IIDENTIFY_CMD} -density ${DENSITY} -format "%w" "$INFILE1[$N]")
	 IN2_W=$(${IIDENTIFY_CMD} -density ${DENSITY} -format "%w" "$INFILE2[$N]")
	 IN1_H=$(${IIDENTIFY_CMD} -density ${DENSITY} -format "%h" "$INFILE1[$N]")
	 IN2_H=$(${IIDENTIFY_CMD} -density ${DENSITY} -format "%h" "$INFILE2[$N]")
	 # Assign smallest value to IN1_?
	 if [[ $IN2_W -lt $IN1_W ]]; then
	     IN1_W=$IN2_W
	 fi
	 if [[ $IN2_H -lt $IN1_H ]]; then
	     IN1_H=$IN2_H
	 fi
	 # Build crop argument
	 CROP_ARG="-crop ${IN1_W}x${IN1_H}+0+0 +repage"
    else
	CROP_ARG=
    fi

    # Convert both pages to grayscale
    exec_tool 1 ${ICONVERT_CMD} -density ${DENSITY} -colorspace gray "$INFILE1[$N]" ${CROP_ARG} ${TEMPFILE1[$N]}
    exec_tool 1 ${ICONVERT_CMD} -density ${DENSITY} -colorspace gray "$INFILE2[$N]" ${CROP_ARG} ${TEMPFILE2[$N]}

    # Create both comparison images
    exec_tool 1 composite -stereo 0 -density ${DENSITY} ${TEMPFILE1[$N]} ${TEMPFILE2[$N]} ${OUTFILE_STEREO[$N]}
    exec_tool 2 ${ICOMPARE_CMD} -metric PSNR -density ${DENSITY} \
                       ${TEMPFILE1[$N]} ${TEMPFILE2[$N]} ${OUTFILE_COMPARE[$N]}
done


# *** Now combine the pages
echo "Creating resulting PDF documents ..."
exec_tool 1 ${PDFTK_CMD} "${OUTFILE_STEREO[@]}" cat output "${OUTFILE}-stereo.pdf"
exec_tool 1 ${PDFTK_CMD} "${OUTFILE_COMPARE[@]}" cat output "${OUTFILE}-compare.pdf"

# *** Cleanup temporary files
echo "Cleaning temporary files ..."
for N in $(seq 0 "$PAGES"); do
    rm -v ${TEMPFILE1[$N]} ${TEMPFILE2[$N]} ${OUTFILE_STEREO[$N]} ${OUTFILE_COMPARE[$N]}
done
